// CLA4: Carry Lookahead Adder de 4 bits
// Entradas: a[4], b[4], cin
// Salidas:  sum[4], cout
//
// Estrategia:
// 1) Calcular señales generate (g) y propagate (p) por bit.
// 2) Calcular c1..c4 usando las fórmulas de lookahead (sin ripple).
// 3) sum[i] = p[i] XOR c[i], cout = c4.

CHIP CLA4 {
    IN  a[4], b[4], cin;
    OUT sum[4], cout;

    PARTS:
        // -------- 1) Generate/Propagate por bit --------
        And(a=a[0], b=b[0], out=g0);
        Xor(a=a[0], b=b[0], out=p0);

        And(a=a[1], b=b[1], out=g1);
        Xor(a=a[1], b=b[1], out=p1);

        And(a=a[2], b=b[2], out=g2);
        Xor(a=a[2], b=b[2], out=p2);

        And(a=a[3], b=b[3], out=g3);
        Xor(a=a[3], b=b[3], out=p3);

        // c0 = cin (lo "ruteamos" a un wire interno)
        Or(a=cin, b=false, out=c0);

        // -------- 2) Lookahead de carries --------
        // c1 = g0 OR (p0 & c0)
        And(a=p0, b=c0, out=t10);
        Or(a=g0, b=t10, out=c1);

        // c2 = g1 OR (p1·g0) OR (p1·p0·c0)
        And(a=p1, b=g0, out=t21);
        And(a=p1, b=p0, out=t22);
        And(a=t22, b=c0, out=t23);
        Or(a=g1, b=t21, out=t24);
        Or(a=t24, b=t23, out=c2);

        // c3 = g2 OR (p2·g1) OR (p2·p1·g0) OR (p2·p1·p0·c0)
        And(a=p2, b=g1, out=t31);
        And(a=p2, b=p1, out=t32);
        And(a=t32, b=g0, out=t33);
        And(a=p2, b=p1, out=t34);
        And(a=t34, b=p0, out=t35);
        And(a=t35, b=c0, out=t36);
        Or(a=g2, b=t31, out=t37);
        Or(a=t37, b=t33, out=t38);
        Or(a=t38, b=t36, out=c3);

        // c4 = g3 OR (p3·g2) OR (p3·p2·g1) OR (p3·p2·p1·g0) OR (p3·p2·p1·p0·c0)
        And(a=p3, b=g2, out=t41);
        And(a=p3, b=p2, out=t42);
        And(a=t42, b=g1, out=t43);
        And(a=p3, b=p2, out=t44);
        And(a=t44, b=p1, out=t45);
        And(a=t45, b=g0, out=t46);
        And(a=p3, b=p2, out=t47);
        And(a=t47, b=p1, out=t48);
        And(a=t48, b=p0, out=t49);
        And(a=t49, b=c0, out=t4a);
        Or(a=g3, b=t41, out=t4b);
        Or(a=t4b, b=t43, out=t4c);
        Or(a=t4c, b=t46, out=t4d);
        Or(a=t4d, b=t4a, out=c4);

        // -------- 3) Sumas --------
        Xor(a=p0, b=c0, out=sum[0]);
        Xor(a=p1, b=c1, out=sum[1]);
        Xor(a=p2, b=c2, out=sum[2]);
        Xor(a=p3, b=c3, out=sum[3]);

        // cout = c4
        Or(a=c4, b=false, out=cout);
}
